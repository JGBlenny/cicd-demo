# workflow 名稱
name: CICD

# 定義了工作流的觸發條件
on:
  # 這表示當代碼推送到指定的分支時，就會觸發該工作流
  push:
    # 這是指定要監控的分支。在這裡是 main 分支，因此每次有 commit 被推送到 main 分支時，工作流將會被觸發。
    branches:
      - release
  # 手動觸發：這允許您從 GitHub 的 UI 頁面手動觸發工作流。在手動觸發工作流時，您可以傳遞一些參數（inputs)
  workflow_dispatch:
    inputs:
      action:
        # 提供該輸入項的描述，當使用者在手動觸發工作流時會看到這個說明。
        description: 'Choose action to perform (pull or rollback)'
        # 設置為 true 意味著這個參數是必須的，使用者必須提供一個值。
        required: true
        # 設置一個預設值，這意味著若使用者未指定，則將這個值作為默認值。預設為 'pull'。
        default: 'pull'
        # 這裡列出可供選擇的選項。在這個例子中，使用者可以選擇 'pull' 或 'rollback' 兩個值來決定要執行的操作。
        options:
          - pull
          - rollback
          
# 每個 job 在獨立的虛擬機器（runner）或容器中運行。這意味著它們不會共享記憶體、變數或當前的工作目錄。
# 當 job 結束時，該工作區會被清理，因此在下一個 job 中不會有先前 job 執行的文件
# 如果您需要在不同的 jobs 之間共享數據，可以使用 artifacts (工件) 來儲存輸出，並在後續的 jobs 中下載。
# 例如，您可以在第一個 job 完成後將生成的文件上傳為 artifact，然後在第二個 job 中下載該 artifact
jobs:
  # 驗證 HTML 文件的作業
  check:
    # 符合您的環境要求：只要確保您選擇的運行環境適合您的專案即可，無論是直接在機器上，還是使用 Docker 容器。
    runs-on: ubuntu-latest
    
    steps:
        - name: Checkout code
          uses: actions/checkout@v2
  
        - name: Validate HTML
          run: |
            # 安裝 htmlhint 工具，用來檢查 HTML 語法及形式
            # 使用 npm 安裝 htmlhint 為全局工具。
            npm install -g htmlhint

            # 使用 htmlhint 驗證指定的 HTML 文件是否符合標準
            # 對 index.html 文件進行語法檢查，確保 HTML 文件格式正確。
            htmlhint index.html

        # 如果您希望測試應用程式的功能（例如使用 Laravel 的內建測試框架進行單元測試或功能測試），您通常需要先安裝所需的 PHP 環境和依賴，然後執行測試。
        # 在這種情況下，您不需要直接進入伺服器，因為可以在工作流上本地運行測試。
        # - name: Set up PHP
        #   uses: shivammathur/setup-php@v2
        #   with:
        #     php-version: '8.0'  # 設置 PHP 版本
        #     extensions: mbstring, xml, bcmath, sqlite3  # 需要的 PHP 擴展

        # - name: Install Composer dependencies
        #   run: |
        #     composer install --prefer-dist --no-progress --no-suggest

        # - name: Run Laravel Tests
        #   run: |
        #     php artisan test  # 執行 Laravel 的測試

  deploy:
    runs-on: ubuntu-latest 
    environment: dev # 指定運行環境為 dev
    needs: check  # 確保在檢查作業成功後才執行部署

    steps:
      # 簽出您的存儲庫
      - name: pull code
        uses: actions/checkout@v2

      # 設置 SSH 金鑰
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 700 ~/.ssh
          chmod 600 ~/.ssh/id_rsa
          # 添加已知主機以防止 SSH 連接時的提示
          ssh-keyscan -H 18.182.31.31 >> ~/.ssh/known_hosts
          
      - name: Deploy to EC2 Host
        env: 
            GITHUB_EVENT_NAME: ${{ github.event_name }} # 獲取事件名稱（push 或 workflow_dispatch）
            GITHUB_EVENT_INPUTS_ACTION: ${{ github.event.inputs.action }} # 獲取用戶指定的操作
        run: |
          # ssh -o StrictHostKeyChecking=no -o ProxyCommand="ssh -W %h:%p -q -i ~/.ssh/id_rsa ec2-user@54.65.6.129" ec2-user@taoyuan-aerotropolis << 'EOF'
          ssh -i ~/.ssh/id_rsa ec2-user@18.182.31.31 << EOF
          export GITHUB_EVENT_NAME="${{ github.event_name }}"
          export GITHUB_EVENT_INPUTS_ACTION="${{ github.event.inputs.action }}"
          BRANCH_NAME=release # 提取純分支名稱
          cd ~/cicd-demo
      
          # Echo 出環境變數以進行調試
          echo "GITHUB_EVENT_NAME: \$GITHUB_EVENT_NAME"
          echo "GITHUB_EVENT_INPUTS_ACTION: \$GITHUB_EVENT_INPUTS_ACTION"
          echo "BRANCH_NAME: \$BRANCH_NAME"  # 輸出分支名稱以進行調試

          # 切換到指定分支
          git fetch origin \$BRANCH_NAME
          git checkout \$BRANCH_NAME

          # 根據事件類型執行不同的操作
          if [ "\$GITHUB_EVENT_NAME" = "push" ]; then
              echo "Pulling latest changes from \$BRANCH_NAME..."
              git pull origin \$BRANCH_NAME --ff-only  # 從指定分支拉取最新的代碼
          elif [ "\$GITHUB_EVENT_NAME" = "workflow_dispatch" ]; then
              if [ "\$GITHUB_EVENT_INPUTS_ACTION" = "rollback" ]; then
                  echo "Rolling back to specified tag..."
                  git checkout tags/your-tag-name # 切換到指定標籤，替換 your-tag-name
              else
                  echo "No valid action specified for rollback." # 操作不合法的錯誤提示
              fi
          fi

          # 記錄部署成功的信息
          echo "Deployment successful on $(date)" >> status.txt

          # 管理 Docker 容器
          docker-compose down # 停止並移除容器
          docker-compose up -d --build # 重建並啟動容器

          # 繼續進行其他操作
          # yarn build
          # docker-compose pull
          # docker-compose down
          # docker-compose up -d --build
          EOF
